Good afternoon ladies and gentlemen, my name is X, this is X, Y and Z and together we form the team that made Refresh.  Refresh is a revision program that uses machine learning in order to produce high quality revision material on any subject.
Refresh is built mainly on Node.JS, allowing us not only scalability but also the ability to provide the user quick response times, not losing users through slow connections.  We use several modules to extend Node.JS, including Request and Q, which together allow us to not only make the program run asynchronously but also concurrently.
Although we’ve not finished linking everything up yet, over the past few days we’ve made good headway on the separate modules that will power our program.  Our aim is to get everything working individually, before linking it all up.
The project itself, is very simple in theory, we let the users choose a category that they want to learn more on, our program gathers information on that subject from the internet, displays a few questions, and if the user doesn’t do well, shows a synopsis of that subject.
Hopefully now we can show you a demo of some of the modules and the design of the website that we’ve come up with.  On the screen you can see our login page.  We’ve tried to go for a more simplistic look, we don’t want to confuse our visitors, instead wanting to show them a clear path.  We’ve also tried to make it as efficient as possible, as of yet we do not have email verification, because that interrupts the workflow too much.
Next, this is our PDF converter.  We send in a PDF, and it returns the text.  We needed this because the syllabuses for the different exam boards are all provided in PDF format.  We need the data points from there in order to ask the questions on the right topic.
Finally, we needed a large amount of natural language processing to get this to work.  Not only did we need to turn any sentence into a question, we also had to create answers and even shorten information from online.